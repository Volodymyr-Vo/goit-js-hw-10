{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nlet selectedDate = null;\nlet timerInterval = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(date) {\n    selectedDate = date[0];\n    if (selectedDate <= new Date()) {\n      startButton.disabled = true;\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  datetimePicker.disabled = true;\n  startButton.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const timeRemaining = selectedDate - Date.now();\n    if (timeRemaining <= 0) {\n      clearInterval(timerInterval);\n      updateTimerDisplay(0, 0, 0, 0);\n      datetimePicker.disabled = false;\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n    updateTimerDisplay(days, hours, minutes, seconds);\n  }, 1000);\n});\n\nconst updateTimerDisplay = (days, hours, minutes, seconds) => {\n  daysValue.textContent = addLeadingZero(days);\n  hoursValue.textContent = addLeadingZero(hours);\n  minutesValue.textContent = addLeadingZero(minutes);\n  secondsValue.textContent = addLeadingZero(seconds);\n};\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nconst addLeadingZero = value => String(value).padStart(2, '0');\n"],"names":["datetimePicker","startButton","daysValue","hoursValue","minutesValue","secondsValue","selectedDate","timerInterval","options","date","iziToast","flatpickr","timeRemaining","updateTimerDisplay","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"sGAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAAe,KACfC,EAAgB,KAEpB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAM,CACZH,EAAeG,EAAK,CAAC,EACjBH,GAAgB,IAAI,MACtBL,EAAY,SAAW,GACvBS,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,GAEDT,EAAY,SAAW,EAE1B,CACH,EAEAU,EAAUX,EAAgBQ,CAAO,EAEjCP,EAAY,iBAAiB,QAAS,IAAM,CAC1CD,EAAe,SAAW,GAC1BC,EAAY,SAAW,GAEvBM,EAAgB,YAAY,IAAM,CAChC,MAAMK,EAAgBN,EAAe,KAAK,IAAG,EAC7C,GAAIM,GAAiB,EAAG,CACtB,cAAcL,CAAa,EAC3BM,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7Bb,EAAe,SAAW,GAC1B,MACD,CAED,KAAM,CAAE,KAAAc,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAa,EACjEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CACjD,EAAE,GAAI,CACT,CAAC,EAED,MAAMJ,EAAqB,CAACC,EAAMC,EAAOC,EAASC,IAAY,CAC5Df,EAAU,YAAciB,EAAeL,CAAI,EAC3CX,EAAW,YAAcgB,EAAeJ,CAAK,EAC7CX,EAAa,YAAce,EAAeH,CAAO,EACjDX,EAAa,YAAcc,EAAeF,CAAO,CACnD,EAEMC,EAAYE,GAAM,CAMtB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,EAEME,EAAiBE,GAAS,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG"}